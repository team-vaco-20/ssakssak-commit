generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String          @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  githubId        BigInt          @unique @map("github_id")
  userEmail       String          @unique @map("user_email")
  userName        String          @map("user_name")
  avatarUrl       String?         @map("avatar_url")
  isActive        Boolean         @default(true) @map("is_active")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  reportHistories ReportHistory[]
  repositories    Repository[]

  @@map("users")
}

model ReportHistory {
  reportHistoryId    String   @id @default(dbgenerated("gen_random_uuid()")) @map("report_history_id") @db.Uuid
  userId             String   @map("user_id") @db.Uuid
  reportHistoryTitle String   @unique(map: "report_histories_report_histories_title_key") @map("report_history_title")
  repositoryOverview String?  @map("repository_overview")
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @map("updated_at") @db.Timestamptz(6)
  repositoryUrl      String   @map("repository_url")
  user               User     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_report_histories_user_id")

  @@map("report_histories")
}

model Repository {
  repositoryId        String   @id @default(dbgenerated("gen_random_uuid()")) @map("repository_id") @db.Uuid
  userId              String   @map("user_id") @db.Uuid
  repositoryName      String   @map("repository_name")
  repositoryOwner     String   @map("repository_owner")
  repositoryUrl       String   @map("repository_url")
  visibility          String
  encryptedCredential Bytes?   @map("encrypted_credential")
  connectedStatus     String   @default("connected") @map("connected_status")
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  user                User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "fk_repositories_user_id")

  @@map("repositories")
}
